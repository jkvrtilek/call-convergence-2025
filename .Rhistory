xlab(paste(colnames(never_met)[i], colnames(familiar)[i], sep = "-"))
dev.off()
i <- i+1
q <- quantile(never_met[,i], probs = c(0.025,0.975))
ci <- data.frame(quantile=names(q), values = unname(q))
png(filename = paste(names[i], ".png", sep = ""), width = 3, height = 4, units = "in", res = 200)
ggplot() +
geom_histogram(data = never_met, aes(x = never_met[,i])) +
geom_point(data = familiar, aes(x = familiar[,i], y = 0), color = "red", size = 5) +
geom_vline(data = ci, aes(xintercept = values, color = "red"), show.legend = F) +
xlab(paste(colnames(never_met)[i], colnames(familiar)[i], sep = "-"))
dev.off()
i <- i+1
q <- quantile(never_met[,i], probs = c(0.025,0.975))
ci <- data.frame(quantile=names(q), values = unname(q))
png(filename = paste(names[i], ".png", sep = ""), width = 3, height = 4, units = "in", res = 200)
ggplot() +
geom_histogram(data = never_met, aes(x = never_met[,i])) +
geom_point(data = familiar, aes(x = familiar[,i], y = 0), color = "red", size = 5) +
geom_vline(data = ci, aes(xintercept = values, color = "red"), show.legend = F) +
xlab(paste(colnames(never_met)[i], colnames(familiar)[i], sep = "-"))
dev.off()
i <- i+1
q <- quantile(never_met[,i], probs = c(0.025,0.975))
ci <- data.frame(quantile=names(q), values = unname(q))
png(filename = paste(names[i], ".png", sep = ""), width = 3, height = 4, units = "in", res = 200)
ggplot() +
geom_histogram(data = never_met, aes(x = never_met[,i])) +
geom_point(data = familiar, aes(x = familiar[,i], y = 0), color = "red", size = 5) +
geom_vline(data = ci, aes(xintercept = values, color = "red"), show.legend = F) +
xlab(paste(colnames(never_met)[i], colnames(familiar)[i], sep = "-"))
dev.off()
i <- i+1
q <- quantile(never_met[,i], probs = c(0.025,0.975))
ci <- data.frame(quantile=names(q), values = unname(q))
png(filename = paste(names[i], ".png", sep = ""), width = 3, height = 4, units = "in", res = 200)
ggplot() +
geom_histogram(data = never_met, aes(x = never_met[,i])) +
geom_point(data = familiar, aes(x = familiar[,i], y = 0), color = "red", size = 5) +
geom_vline(data = ci, aes(xintercept = values, color = "red"), show.legend = F) +
xlab(paste(colnames(never_met)[i], colnames(familiar)[i], sep = "-"))
dev.off()
i <- i+1
q <- quantile(never_met[,i], probs = c(0.025,0.975))
ci <- data.frame(quantile=names(q), values = unname(q))
png(filename = paste(names[i], ".png", sep = ""), width = 3, height = 4, units = "in", res = 200)
ggplot() +
geom_histogram(data = never_met, aes(x = never_met[,i])) +
geom_point(data = familiar, aes(x = familiar[,i], y = 0), color = "red", size = 5) +
geom_vline(data = ci, aes(xintercept = values, color = "red"), show.legend = F) +
xlab(paste(colnames(never_met)[i], colnames(familiar)[i], sep = "-"))
dev.off()
i <- i+1
q <- quantile(never_met[,i], probs = c(0.025,0.975))
ci <- data.frame(quantile=names(q), values = unname(q))
png(filename = paste(names[i], ".png", sep = ""), width = 3, height = 4, units = "in", res = 200)
ggplot() +
geom_histogram(data = never_met, aes(x = never_met[,i])) +
geom_point(data = familiar, aes(x = familiar[,i], y = 0), color = "red", size = 5) +
geom_vline(data = ci, aes(xintercept = values, color = "red"), show.legend = F) +
xlab(paste(colnames(never_met)[i], colnames(familiar)[i], sep = "-"))
dev.off()
i <- i+1
# load packages
library(devtools)
library(STRAND)
install.packages("STRAND")
install.packages("strand")
library(STRAND)
uninstall("strand")
library(strand)
remove.packages("strand")
R.version
R.version
library(devtools)
install_github('ctross/STRAND@phosphorescent_desert_buttons')
install.packages(cmdstanr)
install.packages("cmdstanr")
install.packages("cmdstanr", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
library(devtools)
install_github('ctross/STRAND@phosphorescent_desert_buttons')
library(cmdstanr)
install_github('ctross/STRAND@phosphorescent_desert_buttons')
check_cmdstan_toolchain()
install_cmdstan(cores = 2)
install_github('ctross/STRAND@phosphorescent_desert_buttons')
library(remotes)
install_github('ctross/STRAND@phosphorescent_desert_buttons')
library(devtools)
# load packages
library(devtools)
GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
library(cmdstanr)
library(devtools)
install_github('ctross/STRAND@phosphorescent_desert_buttons')
gitcreds_set()
library(usethis)
git_sitrep()
create_github_token()
gitcreds::gitcreds_set()
install_github('ctross/STRAND@phosphorescent_desert_buttons')
# load packages
library(devtools)
library(STRAND)
library(tidyverse)
library(igraph)
library(diffr)
install.packages("diffr")
library(diffr)
diffr("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/pairs/number_of_calls_01.R","/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/pairs/number_of_calls_02.R")
# analysis for 2024 paired recordings
# question 1: do different bats call different amounts? does calling rate depend on recipient?
# use Bayesian social relations model, strand package
# actor, receiver, and interaction automatically included
# response variable = call count
# predictor = Haley's grooming OR food-sharing? maybe just the data from before my data?
# results: effects of actor's tendency to call, receiver's tendency to receive, correlation at dyadic level between caller calling and receiver calling (do the bats I call to more call to me more, controlling for overall calling and receiving rate), correlation at group level (if I call more to the group, does the group call more to me?) and THEN finally will tell us whether bats are calling more depending on predictor variable
# how to make use of added power from 3 replicate matrices? for now, take average, but keep thinking about this
# Julia Vrtilek
# Adapted from Haley Gmutza, May 2025
# load packages
library(STRAND)
library(tidyverse)
library(igraph)
setwd("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/pairs")
# load and wrangle vocal data ----
batcalls <- readRDS("vocal_data_2024-pairs.RDS") %>%
group_by(caller, receiver) %>%
summarize(n.calls = n()) %>%
ungroup() %>%
add_row(caller = "quark", receiver = "yikes", n.calls = 0) %>% # quark never called. this row makes names appear alphabetically
arrange(caller)
netcalls <- graph_from_data_frame(batcalls)
mcalls <- as_adjacency_matrix(netcalls, attr= 'n.calls', sparse=F)
nets = list(call = mcalls)
bats.used <- rownames(mcalls)
# load and wrangle social data ----
# already trimmed bat donations list
donations <- read.csv('OSU_2024_social_data.csv')
donations$Actor <- tolower(donations$Actor)
donations$Receiver <- tolower(donations$Receiver)
bat.donations <- donations %>%
filter(Actor %in% bats.used) %>%
filter(Receiver %in% bats.used)
# make foodsharing matrix
rates <-
bat.donations %>%
filter(Behavior == "Mouthlicking") %>%
mutate(edge= paste(Actor, Receiver, sep="_")) %>%
group_by(edge) %>%
summarize(rate= sum(rate, na.rm=T)) %>%
filter(rate>=0) %>%
separate(edge, into=c('Actor', 'Receiver'))
net <- graph_from_data_frame(rates)
m <- as_adjacency_matrix(net, attr= 'rate', sparse=F)
# # make grooming matrix
# ratesg <-
#   bat.donations %>%
#   filter(Behavior == "Grooming") %>%
#   mutate(edge= paste(Actor, Receiver, sep="_")) %>%
#   group_by(edge) %>%
#   summarize(rate= sum(rate, na.rm=T)) %>%
#   filter(rate>=0) %>%
#   separate(edge, into=c('Actor', 'Receiver'))
#
# netg <- graph_from_data_frame(ratesg)
# mg <- as_adjacency_matrix(netg, attr= 'rate', sparse=F)
# individual variable - age
chars <- read.csv('campus_bat_chars.csv', stringsAsFactors = F)
chars$Bat.name <- tolower(chars$Bat.name)
batchars <- chars %>%
filter(Bat.name %in% bats.used) %>%
select(Age)
rownames(batchars) <- bats.used
# dyadic variables - kinship, foodsharing
distmat <- read.delim('Desmodus_DistanceMatrix.txt',row.names = 1)
distmat <- data.matrix(distmat)
dyad = list(#Kinship = distmat,
Lick = m)
# Make the STRAND data structure ----
dat = make_strand_data(
outcome = nets,
individual_covariates = batchars,
dyadic_covariates = dyad,
outcome_mode = "poisson",
link_mode = "log",
check_standardization = F) # I don't see why we would standardize age??? but maybe we should
View(batcalls)
batcalls <- readRDS("vocal_data_2024-pairs.RDS")
View(batcalls)
str(batcalls)
# load and wrangle vocal data ----
raw <- readRDS("vocal_data_2024-pairs.RDS") %>%
mutate(date = as.Date(date))
# analysis for 2024 paired recordings
# question 1: do different bats call different amounts? does calling rate depend on recipient?
# use Bayesian social relations model, strand package
# actor, receiver, and interaction automatically included
# response variable = call count
# predictor = Haley's grooming OR food-sharing? maybe just the data from before my data?
# results: effects of actor's tendency to call, receiver's tendency to receive, correlation at dyadic level between caller calling and receiver calling (do the bats I call to more call to me more, controlling for overall calling and receiving rate), correlation at group level (if I call more to the group, does the group call more to me?) and THEN finally will tell us whether bats are calling more depending on predictor variable
# how to make use of added power from 3 replicate matrices? for now, take average, but keep thinking about this
# Julia Vrtilek
# Adapted from Haley Gmutza, May 2025
# load packages
library(STRAND)
library(tidyverse)
library(igraph)
setwd("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/pairs")
# load and wrangle vocal data ----
raw <- readRDS("vocal_data_2024-pairs.RDS") %>%
mutate(date = as.Date(date))
str(raw)
# load and wrangle vocal data ----
raw <- readRDS("vocal_data_2024-pairs.RDS") %>%
mutate(date = as.Date(date)) %>%
mutate(session = case_when(date < "2024-07-22" ~ "1",
date > "2024-07-21" & date < "2024-07-29" ~ "2",
date > "2024-07-28" ~ "3"))
View(raw)
batcalls <- raw %>%
group_by(caller, receiver, session) %>%
summarize(n.calls = n()) %>%
ungroup() %>%
add_row(caller = "quark", receiver = "yikes", n.calls = 0) %>% # quark never called. this row makes names appear alphabetically
arrange(caller)
View(batcalls)
View(batcalls)
View(raw)
netcalls <- graph_from_data_frame(batcalls)
mcalls <- as_adjacency_matrix(netcalls, attr= 'n.calls', sparse=F)
nets = list(call = mcalls)
bats.used <- rownames(mcalls)
View(nets)
View(batcalls)
batcalls <- raw %>%
group_by(caller, receiver, session) %>%
summarize(n.calls = n()) %>%
ungroup() %>%
add_row(caller = "quark", receiver = "yikes", n.calls = 0) %>% # quark never called. this row makes names appear alphabetically
netcalls <- graph_from_data_frame(batcalls)
batcalls <- raw %>%
group_by(caller, receiver, session) %>%
summarize(n.calls = n()) %>%
ungroup() %>%
add_row(caller = "quark", receiver = "yikes", n.calls = 0) # quark never called. this row makes names appear alphabetically
View(batcalls)
# analysis for 2024 paired recordings
# question 1: do different bats call different amounts? does calling rate depend on recipient?
# use Bayesian social relations model, strand package
# actor, receiver, and interaction automatically included
# response variable = call count
# predictor = Haley's grooming OR food-sharing? maybe just the data from before my data?
# results: effects of actor's tendency to call, receiver's tendency to receive, correlation at dyadic level between caller calling and receiver calling (do the bats I call to more call to me more, controlling for overall calling and receiving rate), correlation at group level (if I call more to the group, does the group call more to me?) and THEN finally will tell us whether bats are calling more depending on predictor variable
# how to make use of added power from 3 replicate matrices? for now, take average, but keep thinking about this
# Julia Vrtilek
# Adapted from Haley Gmutza, May 2025
# load packages
library(STRAND)
library(tidyverse)
library(igraph)
setwd("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/pairs")
# load and wrangle vocal data ----
raw <- readRDS("vocal_data_2024-pairs.RDS") %>%
mutate(date = as.Date(date)) %>%
mutate(session = case_when(date < "2024-07-22" ~ "1",
date > "2024-07-21" & date < "2024-07-29" ~ "2",
date > "2024-07-28" ~ "3"))
batcalls <- raw %>%
group_by(caller, receiver, session) %>%
summarize(n.calls = n()) %>%
ungroup() %>%
add_row(caller = "quark", # quark never called; adding this row makes names appear alphabetically
receiver = "yikes", session = 1, n.calls = 0)
# analysis for 2024 paired recordings
# question 1: do different bats call different amounts? does calling rate depend on recipient?
# use Bayesian social relations model, strand package
# actor, receiver, and interaction automatically included
# response variable = call count
# predictor = Haley's grooming OR food-sharing? maybe just the data from before my data?
# results: effects of actor's tendency to call, receiver's tendency to receive, correlation at dyadic level between caller calling and receiver calling (do the bats I call to more call to me more, controlling for overall calling and receiving rate), correlation at group level (if I call more to the group, does the group call more to me?) and THEN finally will tell us whether bats are calling more depending on predictor variable
# how to make use of added power from 3 replicate matrices? for now, take average, but keep thinking about this
# Julia Vrtilek
# Adapted from Haley Gmutza, May 2025
# load packages
library(STRAND)
library(tidyverse)
library(igraph)
setwd("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/pairs")
# load and wrangle vocal data ----
raw <- readRDS("vocal_data_2024-pairs.RDS") %>%
mutate(date = as.Date(date)) %>%
mutate(session = case_when(date < "2024-07-22" ~ "1",
date > "2024-07-21" & date < "2024-07-29" ~ "2",
date > "2024-07-28" ~ "3"))
batcalls <- raw %>%
group_by(caller, receiver, session) %>%
summarize(n.calls = n()) %>%
ungroup() %>%
add_row(caller = "quark", # quark never called; adding this row makes names appear alphabetically
receiver = "yikes", session = "1", n.calls = 0)
View(batcalls)
netcalls <- graph_from_data_frame(batcalls)
View(netcalls)
mcalls <- as_adjacency_matrix(netcalls, attr= 'n.calls', sparse=F)
nets = list(call = mcalls)
View(nets)
nets
View(batcalls)
batcalls <- raw %>%
group_by(caller, receiver) %>%
summarize(n.calls = n()) %>%
ungroup() #%>%
View(batcalls)
batcalls_session <- raw %>%
group_by(caller, receiver, session) %>%
summarize(n.calls = n()) %>%
ungroup() %>%
add_row(caller = "quark", # quark never called; adding this row makes names appear alphabetically
receiver = "yikes", session = "1", n.calls = 0)
# analysis for 2024 paired recordings
# question 1: do different bats call different amounts? does calling rate depend on recipient?
# use Bayesian social relations model, strand package
# actor, receiver, and interaction automatically included
# response variable = call count
# predictor = Haley's grooming OR food-sharing? maybe just the data from before my data?
# results: effects of actor's tendency to call, receiver's tendency to receive, correlation at dyadic level between caller calling and receiver calling (do the bats I call to more call to me more, controlling for overall calling and receiving rate), correlation at group level (if I call more to the group, does the group call more to me?) and THEN finally will tell us whether bats are calling more depending on predictor variable
# how to make use of added power from 3 replicate matrices? for now, take average, but keep thinking about this
# Julia Vrtilek
# Adapted from Haley Gmutza, May 2025
# load packages
library(STRAND)
library(tidyverse)
library(igraph)
setwd("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/pairs")
# load and wrangle vocal data ----
raw <- readRDS("vocal_data_2024-pairs.RDS") %>%
mutate(date = as.Date(date)) %>%
mutate(session = case_when(date < "2024-07-22" ~ "1",
date > "2024-07-21" & date < "2024-07-29" ~ "2",
date > "2024-07-28" ~ "3"))
batcalls_session <- raw %>%
group_by(caller, receiver, session) %>%
summarize(n.calls = n()) %>%
ungroup() %>%
add_row(caller = "quark", # quark never called; adding this row makes names appear alphabetically
receiver = "yikes", session = "1", n.calls = 0)
batcalls <- raw %>%
group_by(caller, receiver) %>%
summarize(n.calls = n()) %>%
ungroup() %>%
add_row(caller = "quark", # quark never called; adding this row makes names appear alphabetically
receiver = "yikes", n.calls = 0)
View(batcalls)
View(batcalls_session)
# clear workspace
rm(list=ls())
# set working directory
setwd("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/call-convergence-2025")
# load packages
library(tidyverse)
# clear workspace
rm(list=ls())
# set working directory
setwd("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/call-convergence-2025")
# load packages
library(tidyverse)
# function
matrix_to_df <- function(m1){
data.frame(dyad = paste(rownames(m1)[col(m1)], colnames(m1)[row(m1)], sep="_"),
value = c(t(m1)), stringsAsFactors = FALSE)
}
# get vocal distances
dist <- as.matrix(read_csv("vocal-distance-94-bats.csv"))
rownames(dist) <- colnames(dist)
distdf <-
matrix_to_df(dist) %>%
rename(dist= value) %>%
separate(dyad, into = c("bat1","bat2"), sep = "_", remove = F) %>%
filter(bat1 != bat2) %>%
mutate(dyad = ifelse(bat1<bat2, paste(bat1,bat2, sep="_"), paste(bat2,bat1, sep="_"))) %>%
group_by(dyad) %>%
summarize (dist= mean(dist, na.rm=T))
# get bat sexes and ages at recording
sex <-
read.csv("sex_age03.csv") %>%
mutate(birthdate = mdy(birthdate), date= mdy(date)) %>%
mutate(age.days = as.numeric(date- birthdate)) %>%
mutate(age.years = age.days/365) %>%
group_by(bat, sex) %>%
summarize(age= mean(age.years),
n.recorded.dates=n(), .groups= 'drop') %>%
mutate(adult= is.na(age) | age>2)
# get kinship
k <-
read_csv("kinship-all-bats01.csv") %>%
group_by(dyad) %>%
arrange(dyad, bat1) %>%
summarize(bat1= first(bat1), bat2= first(bat2), site1= first(site1), site2= first(site2), colony1= first(colony1), colony2= first(colony2), kinship= first(kinship)) %>%
ungroup()
# get directed social data
directed.social <- read_csv("2010-2019_vamp_social_interactions01.csv")
# get undirected social data
social <-
directed.social %>%
mutate(dyad = ifelse(actor<receiver, paste(actor,receiver, sep= "_"), paste(receiver,actor, sep= "_"))) %>%
group_by(dyad) %>%
summarize(study= first(study),
donation.rate = mean(donation.rate, na.rm=T),
donation.lograte = mean(donation.lograte, na.rm=T),
groom.rate = mean(groom.rate, na.rm=T),
groom.lograte = mean(groom.lograte, na.rm=T),
contact.rate = mean(contact.rate, na.rm=T),
contact.lograte = mean(contact.lograte, na.rm=T))
# combine all data
d <-
full_join(k,social,by = "dyad") %>%
full_join(distdf,by = "dyad") %>%
# get bats with vocal distance
filter(!is.na(dist)) %>%
# add sex
mutate(sex1= sex$sex[match(.$bat1, sex$bat)]) %>%
mutate(sex2= sex$sex[match(.$bat2, sex$bat)]) %>%
mutate(sex1= ifelse(bat1== "war-machine", "male", sex1)) %>%
mutate(sex2= ifelse(bat2== "war-machine", "male", sex2)) %>%
# label adults
mutate(adult1= sex$adult[match(.$bat1, sex$bat)]) %>%
mutate(adult2= sex$adult[match(.$bat2, sex$bat)]) %>%
mutate(adult1= ifelse(bat1== "war-machine", TRUE, adult1)) %>%
mutate(adult2= ifelse(bat2== "war-machine", TRUE, adult2)) %>%
mutate(both_adult = adult1 & adult2) %>%
mutate(both_young = !adult1 & !adult2) %>%
# label dyad for capture site
mutate(site= case_when(
site1 == "zoo" & site2 == "zoo" ~ "US",
site1 == "chorrera" & site2 == "chorrera" ~ "CH",
site1 == "tole" & site2 == "tole" ~ "TL",
site1 == "las.pavas" & site2 == "las.pavas" ~ "LP",
site1 == "lake.bayano" & site2 == "lake.bayano" ~ "LB",
site1 == "chilibre" & site2 == "chilibre" ~ "CB",
site1 != site2  ~ "different sites",
TRUE ~ "other")) %>%
# label dyad by lab colony
mutate(study= case_when(
colony1 == "2014-colony" & colony2 == "2014-colony" ~ "2014",
colony1 == "2017-colony" & colony2 == "2017-colony" ~ "2017",
colony1 == "2019-colony" & colony2 == "2019-colony" ~ "2019",
colony1 != colony2 & is.na(donation.rate)  ~ "different years",
# bats d and scs were in both 2017 and 2019 datasets (but are labeled as 2019 bats)
# so this line is necessary
colony1 != colony2 & !is.na(donation.rate)  ~ "2017",
TRUE ~ "other")) %>%
# add zoo vs wild
mutate(both_zoo = site1 == "zoo" & site2 == "zoo") %>%
mutate(both_wild = site1 != "zoo" & site2 != "zoo") %>%
# label social experience treatments
mutate(study_site= paste(study, site, sep="_")) %>%
# rank treatments
# 1 = never met
# 2 = caught in same roost two years apart
# 3 = introduced in captivity
# 4 = caught together and caged together
# 5 = long-term captive colony
mutate(treatment_rank = case_when(
study_site == "2019_CH" ~ 4,
study_site == "2019_LB" ~ 4,
study_site == "2017_LP" ~ 4,
study_site == "2019_TL" ~ 4,
study_site == "2017_TL" ~ 4,
study_site == "2017_CB" ~ 4,
study_site == "2014_US" ~ 5,
study_site == "2017_different sites" ~ 3,
study_site == "2019_different sites" ~ 3,
study_site == "different years_TL" ~ 2,
study_site == "different years_different sites" ~ 1,
TRUE ~ 0)) %>%
mutate(treatment_label = case_when(
treatment_rank == 1 ~ "1. never met",
treatment_rank == 2 ~ "2. same wild roost\nbut different years",
treatment_rank == 3 ~ "3. different wild roost\nthen caged together",
treatment_rank == 4 ~ "4. same wild roost\nthen caged together",
treatment_rank == 5 ~ "5. same long-term \ncaptive colony",
TRUE ~ "other")) %>%
# add vocal similarity
# sim = inverse of distance on scale of 0 to 1
mutate(sim = 1- (dist/max(dist))) %>%
# label sexes of dyad
mutate(dyad.sex = case_when(
sex1 == "female" & sex2 == "female" ~ "female",
sex1 == "male" & sex2 == "male" ~ "male",
TRUE ~ "mixed_sex")) %>%
# add kinship categories
mutate(kinship2= case_when(
kinship == 0 ~ "0",
kinship < 0.25 ~ "0.01-0.249",
kinship >= 0.25 ~"0.25-0.5",
TRUE ~ NA_character_)) %>%
# beta models require response to be greater than zero
# we have one observation with similarity = 0 (next lowest value is 0.111)
# change that zero to 0.001
mutate(sim = ifelse(sim ==0, 0.001, sim))
# get descriptive statistics for bats included in analysis
# check bats
(bats <-
tibble(bat= c(d$bat1, d$bat2),
colony= c(d$colony1, d$colony2),
sex= c(d$sex1, d$sex2),
adult= c(d$adult1, d$adult2),
site= c(d$site1, d$site2)) %>%
group_by(bat) %>%
summarize(colony= first(colony), sex= first(sex), adult= first(adult), site= first(site)))
View(bats)
