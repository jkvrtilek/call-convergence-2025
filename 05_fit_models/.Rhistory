q <- quantile(never_met[,i], probs = c(0.025,0.975))
ci <- data.frame(quantile=names(q), values = unname(q))
png(filename = paste(names[i], ".png", sep = ""), width = 3, height = 4, units = "in", res = 200)
ggplot() +
geom_histogram(data = never_met, aes(x = never_met[,i])) +
geom_point(data = familiar, aes(x = familiar[,i], y = 0), color = "red", size = 5) +
geom_vline(data = ci, aes(xintercept = values, color = "red"), show.legend = F) +
xlab(paste(colnames(never_met)[i], colnames(familiar)[i], sep = "-"))
dev.off()
i <- i+1
q <- quantile(never_met[,i], probs = c(0.025,0.975))
ci <- data.frame(quantile=names(q), values = unname(q))
png(filename = paste(names[i], ".png", sep = ""), width = 3, height = 4, units = "in", res = 200)
ggplot() +
geom_histogram(data = never_met, aes(x = never_met[,i])) +
geom_point(data = familiar, aes(x = familiar[,i], y = 0), color = "red", size = 5) +
geom_vline(data = ci, aes(xintercept = values, color = "red"), show.legend = F) +
xlab(paste(colnames(never_met)[i], colnames(familiar)[i], sep = "-"))
dev.off()
i <- i+1
q <- quantile(never_met[,i], probs = c(0.025,0.975))
ci <- data.frame(quantile=names(q), values = unname(q))
png(filename = paste(names[i], ".png", sep = ""), width = 3, height = 4, units = "in", res = 200)
ggplot() +
geom_histogram(data = never_met, aes(x = never_met[,i])) +
geom_point(data = familiar, aes(x = familiar[,i], y = 0), color = "red", size = 5) +
geom_vline(data = ci, aes(xintercept = values, color = "red"), show.legend = F) +
xlab(paste(colnames(never_met)[i], colnames(familiar)[i], sep = "-"))
dev.off()
i <- i+1
q <- quantile(never_met[,i], probs = c(0.025,0.975))
ci <- data.frame(quantile=names(q), values = unname(q))
png(filename = paste(names[i], ".png", sep = ""), width = 3, height = 4, units = "in", res = 200)
ggplot() +
geom_histogram(data = never_met, aes(x = never_met[,i])) +
geom_point(data = familiar, aes(x = familiar[,i], y = 0), color = "red", size = 5) +
geom_vline(data = ci, aes(xintercept = values, color = "red"), show.legend = F) +
xlab(paste(colnames(never_met)[i], colnames(familiar)[i], sep = "-"))
dev.off()
i <- i+1
# load packages
library(devtools)
library(STRAND)
install.packages("STRAND")
install.packages("strand")
library(STRAND)
uninstall("strand")
library(strand)
remove.packages("strand")
R.version
R.version
library(devtools)
install_github('ctross/STRAND@phosphorescent_desert_buttons')
install.packages(cmdstanr)
install.packages("cmdstanr")
install.packages("cmdstanr", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
library(devtools)
install_github('ctross/STRAND@phosphorescent_desert_buttons')
library(cmdstanr)
install_github('ctross/STRAND@phosphorescent_desert_buttons')
check_cmdstan_toolchain()
install_cmdstan(cores = 2)
install_github('ctross/STRAND@phosphorescent_desert_buttons')
library(remotes)
install_github('ctross/STRAND@phosphorescent_desert_buttons')
library(devtools)
# load packages
library(devtools)
GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
library(cmdstanr)
library(devtools)
install_github('ctross/STRAND@phosphorescent_desert_buttons')
gitcreds_set()
library(usethis)
git_sitrep()
create_github_token()
gitcreds::gitcreds_set()
install_github('ctross/STRAND@phosphorescent_desert_buttons')
# load packages
library(devtools)
library(STRAND)
library(tidyverse)
library(igraph)
diffr("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/call-convergence-2025/05_fit_models08.R", "/Users/jkvrtilek/Downloads/05_fit_models_10.R")
library(diffr)
diffr("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/call-convergence-2025/05_fit_models08.R", "/Users/jkvrtilek/Downloads/05_fit_models_10.R")
# Contact call convergence in vampire bats
# Is vocal distance predicted by familiarity (group membership), within-group affiliation, or food sharing?
# Julia Vrtilek and Gerry Carter
# clear workspace
rm(list=ls())
# set working directory
# setwd("/Users/gc1511/Dropbox (Personal)/Dropbox/_working/_ACTIVE/__students/Julia Vrtilek/2024/call convergence/2024-09")
# load packages
library(tidyverse)
library(boot)
library(brms)
library(igraph)
library(bayesplot)
library(ggdist)
library(patchwork)
library(tidybayes)
load("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/call-convergence-2025/05_fit_models/model_fit_workspace_2025-05-27_2116.Rdata")
# ***plot kinship effect----
# plot data
(p1 <-
t %>%
ggplot(aes(x=kinship, y=sim))+
geom_point(size=1, alpha=0.5)+
geom_smooth()+
ylab("contact call similarity")+
xlab("kinship")+
theme_bw())
# get relevant data
# adult pairs with known kinship
t <-
d %>%
filter(both_adult) %>%
filter(!is.na(kinship))
# ***plot kinship effect----
# plot data
(p1 <-
t %>%
ggplot(aes(x=kinship, y=sim))+
geom_point(size=1, alpha=0.5)+
geom_smooth()+
ylab("contact call similarity")+
xlab("kinship")+
theme_bw())
# plot means and bootstrapped 95% CIs
means <-
t %>%
boot_ci2(x = .$kinship2, y= .$sim)
(p2 <-
means %>%
ggplot(aes(x=effect, y=mean))+
geom_point(size=3)+
geom_errorbar(aes(ymin=low, ymax=high, width=.1), size=1)+
ylab("contact call similarity")+
xlab("kinship range")+
theme_bw())
getwd()
setwd("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/call-convergence-2025/05_fit_models/")
# ***save kinship plot----
(kinship.plot <- p1+p2+plot_layout(widths= c(1,1)))
ggsave(
"kinship_plot.pdf",
plot = last_plot(),
scale = 1,
width = 8,
height = 4,
units = c("in", "cm", "mm", "px"),
dpi = 300)
# remove temporary data
remove(t)
# get relevant data
t <-
d %>%
filter(both_adult) %>%
# bats that could never have been seen sharing or grooming are labeled NA
# for this analysis, convert NA for sharing and grooming to zeros
mutate(affiliation.rate = ifelse(is.na(affiliation.rate), 0, affiliation.rate)) %>%
mutate(affiliation.lograte = ifelse(is.na(affiliation.lograte), 0, affiliation.lograte)) %>%
# label pairs that are familiar
mutate(familiar = treatment_rank>1) %>%
# remove pairs with unknown kinship
# note: this excludes all pairs from same roost on different years
filter(!is.na(kinship))
# plot model results
coefs.k2 %>%
# wrap text
mutate(label= case_when(
predictor == "affiliation rate (allogrooming + food sharing), conditioning on kinship and being caged together"~
"affiliation rate\nconditioning on kinship\nand being caged together\n",
predictor == "kinship, conditioning on affiliation rate and being caged together" ~
"kinship\nconditioning on affiliation rate\nand being caged together",
predictor == "caged together, conditioning on affiliation rate and kinship" ~
"caged together\nconditioning on affiliation rate\nand kinship",
TRUE ~ "error")) %>%
mutate(label= fct_rev(label)) %>%
ggplot(aes(x=Estimate, y=label))+
geom_vline(xintercept = 0, linetype= "solid", color= 'black')+
geom_point(size=2)+
geom_errorbarh(aes(xmin=`l-95% CI`, xmax=`u-95% CI`, height=0.1), size=1)+
xlab("effect on contact call similarity")+
ylab("")+
theme_bw()+
theme(axis.text.y = element_text(size = 12, vjust = 0.5, hjust = 0.5))
remove(t)
# get relevant data to plot
t <-
d %>%
filter(both_adult) %>%
filter(dyad.sex== "female") %>%
filter(kinship <0.05| is.na(kinship)) %>%
# simplify treatment label and remove treatment 2, which is not really used in comparisons
filter(treatment_rank != 2) %>%
mutate(treatment_label = substring(treatment_label, first= 4, last= 100)) %>%
# set order for plot
mutate(treatment_label = factor(treatment_label, levels= c("never met", "different wild roost\nthen caged together", "same wild roost\nthen caged together","same long-term \ncaptive colony")))
# plot means and 95% CIs
means <-
t %>%
filter(!is.na(treatment_label)) %>%
boot_ci2(x = .$treatment_label, y= .$sim)
points <-
t %>%
filter(!is.na(treatment_label)) %>%
mutate(effect= treatment_label)
# plot with raw data
(p3 <-
means %>%
ggplot(aes(x=effect, y=mean))+
geom_jitter(data= points, aes(y= sim), size=1, alpha=0.4, height=0, width=0.1, color= "darkgrey")+
geom_boxplot(data= points, aes(y= sim), width=0.1, fill=NA, color="black", outlier.shape=NA)+
geom_point(position = position_nudge(x = 0.25), size=1)+
geom_errorbar(aes(ymin=low, ymax=high, width=.1), position = position_nudge(x = 0.25), size=1)+
ylab("contact call similarity")+
xlab("familiarity level")+
scale_colour_brewer(palette= "Dark2")+
geom_hline(yintercept = means[1,"mean"], col = "black")+
theme_bw()+
theme(legend.position = "none"))
# plot without raw data
(p4 <-
means %>%
ggplot(aes(x=effect, y=mean))+
geom_point(size=3)+
geom_errorbar(aes(ymin=low, ymax=high, width=.1), size=1)+
ylab("contact call similarity")+
xlab(" \nfamiliarity level")+
scale_colour_brewer(palette= "Dark2")+
geom_hline(yintercept = means[1,"mean"], col = "black")+
theme_bw()+
theme(axis.text.x = element_text(size = 11))+
theme(legend.position = "none"))
# combine plots
# remove x-axis from top plot
p3a <-
p3+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
(p5 <- p3a/p4)
# save plot
ggsave(
"familiarity_plot.pdf",
plot = p5,
scale = 1,
width = 7,
height = 5,
units = c("in", "cm", "mm", "px"),
dpi = 300)
# get relevant data to analyze
# get pairs of nonkin females that never met (treatment rank 1) and ones that were introduced (treatment rank 3)
# compare those two groups treatment rank 1 vs 3
t <-
d %>%
filter(both_adult) %>%
# get female dyads
filter(dyad.sex== "female") %>%
# get nonkin dyads
filter(kinship == 0) %>%
# get bats that never met or were introduced
filter(treatment_rank == 1 | treatment_rank == 3 ) %>%
# label familiar as TRUE/FALSE
mutate(fam = treatment_rank > 1)
remove(t)
#***plot affiliation effect-------------
# get relevant data
# pairs of female bats in the same group
t <-
d %>%
# exclude pairs with bats that could never groom
filter(!is.na(affiliation.lograte)) %>%
filter(kinship <0.05) %>%
filter(both_adult) %>%
filter(dyad.sex== "female") %>%
mutate(colony= substring(study_site,1,4)) %>%
mutate(affiliation= affiliation.rate> 0) %>%
mutate(type= ifelse(colony== "2014", "food sharing in stable colony", "mostly allogrooming in merged colony"))
# plot
(p <-
t %>%
ggplot(aes(x=affiliation.lograte, y=sim, color= colony))+
facet_wrap(~type, scales= "free_x")+
geom_point(size=2)+
geom_smooth(method="lm")+
xlab("within-group affiliation log rate")+
ylab("contact call similarity")+
scale_color_brewer(palette= "Dark2")+
theme_bw()+
theme(legend.position = "top"))
# save plot
ggsave(
"affiliation_plot.pdf",
plot = p,
scale = 1,
width = 6,
height = 5,
units = c("in", "cm", "mm", "px"),
dpi = 300)
# get relevant data
t <-
d %>%
filter(both_adult) %>%
filter(kinship <0.05) %>%
filter(dyad.sex== "female") %>%
mutate(colony= substring(study_site,1,4)) %>%
filter(!is.na(donation.rate)) %>%
mutate(share = ifelse(donation.rate>0, "food-sharing\nfemale pairs", "non-sharing\nfemale pairs")) %>%
mutate(share = factor(share)) %>%
mutate(share = fct_rev(share)) %>%
mutate(type= ifelse(colony== "2014", "long-term stable colony (2014)", "merged colony (2017)"))
# get data from all pairs (not just female pairs)
t2 <-
d %>%
filter(both_adult) %>%
filter(kinship <0.05) %>%
mutate(colony= substring(study_site,1,4)) %>%
filter(!is.na(donation.rate)) %>%
mutate(share = ifelse(donation.rate>0, "food-sharing\npairs", "non-sharing\npairs")) %>%
mutate(share = factor(share)) %>%
mutate(share = fct_rev(share)) %>%
mutate(type= ifelse(colony== "2014", "long-term stable colony (2014)", "merged colony (2017)"))
# plot
(p1 <-
t %>%
ggplot(aes(x=donation.lograte, y=sim))+
facet_wrap(~type, scales= "free_x")+
geom_point(size=2, alpha=0.4)+
geom_smooth(method="lm")+
xlab("food sharing log rate")+
ylab("contact call similarity")+
scale_color_brewer(palette= "Dark2")+
theme_bw()+
theme(legend.position = "none"))
# plot means and 95% CIs
means <-
t %>%
boot_ci2(x = .$share, y= .$sim)
points <-
t %>%
mutate(effect= share)
(p2 <-
means %>%
mutate(effect= fct_rev(effect)) %>%
mutate(label= "female nonkin pairs") %>%
ggplot(aes(x=effect, y=mean))+
facet_wrap(~ label)+
geom_jitter(data= points, aes(y= sim), size=2, alpha=0.4, height=0, width=0.1)+
geom_point(position = position_nudge(x = 0.25), size=3, color= "blue")+
geom_errorbar(aes(ymin=low, ymax=high, width=.1), position = position_nudge(x = 0.25), size=1, color= "blue")+
xlab("")+
theme_bw()+
theme(axis.text.x = element_text(size=11),
axis.text.y= element_blank(),
axis.title.y = element_blank()))
# same plot with both sexes
means2 <-
t2 %>%
boot_ci2(x = .$share, y= .$sim)
points2 <-
t2 %>%
mutate(effect= share)
(p3 <-
means2 %>%
mutate(label= "all nonkin pairs") %>%
ggplot(aes(x=effect, y=mean))+
facet_wrap(~ label)+
geom_jitter(data= points2, aes(y= sim), size=2, alpha=0.4, height=0, width=0.1)+
geom_point(position = position_nudge(x = 0.25), size=3, color= "blue")+
geom_errorbar(aes(ymin=low, ymax=high, width=.1), position = position_nudge(x = 0.25), size=1, color= "blue")+
xlab("")+
theme_bw()+
theme(axis.text.x = element_text(size=11),
axis.text.y= element_blank(),
axis.title.y = element_blank()))
(p4 <- p1+p2+p3 +plot_layout(widths= c(2,1,1))+ plot_annotation(tag_levels = c("A", "B", "C")))
# save plot
ggsave(
"sharing_plot.pdf",
plot = p4,
scale = 1,
width = 10,
height = 5,
units = c("in", "cm", "mm", "px"),
dpi = 300)
# plot all posterior distributions--------
(models.plot <-
all_post %>%
filter(term != "b_captured.togetherTRUE") %>%
mutate(label= paste(model, term)) %>%
mutate(label= case_when(
label == "Model1 b_scalekinship" ~
"1. model 1: kinship",
label == "Model2 b_scalekinship" ~
"2. model 2: kinship\n(covariates: affiliation\nand co-housing)",
label == "Model2 b_scaleaffiliation.lograte"~
"3. model 2: affiliation\n(covariates: kinship\nand co-housing)",
label == "Model2 b_familiarTRUE" ~
"4. model 2: co-housing\n(covariates: affiliation\nand kinship)",
label== "Model3 b_famTRUE" ~
"5. model 3: co-housing\n(only nonkin females)",
label == "Model4 b_scaleaffiliation.lograte" ~
"6. model 4: affiliation \n(only co-housed\nnonkin females)",
label == "Model5 b_scaledonation.lograte" ~
"7. model 5: food sharing\n(only co-housed\nnonkin females)",
TRUE ~ "error")) %>%
mutate(label= fct_rev(label)) %>%
ggplot(aes(y = label, x = coeff, fill=model)) +
stat_halfeye(.width = c(0.95), linewidth= 5, size=5)+
geom_vline(xintercept = 0)+
ylab("")+
xlab("estimated effect on vocal similarity (coefficient)")+
theme_bw()+
theme(legend.position= 'none',
axis.text.y = element_text(size = 10, vjust = 0.5, hjust = 0.5)))
# save plot
ggsave(
"summary_plot.pdf",
plot = models.plot,
scale = 1,
width = 5.5,
height = 6.5,
units = c("in", "cm", "mm", "px"),
dpi = 300)
# save plot
ggsave(
"pp_check.pdf",
plot = pp,
scale = 1,
width = 4,
height = 6,
units = c("in", "cm", "mm", "px"),
dpi = 300)
# save posterior predictive check-----
pp <- pp1 / pp2 / pp3 / pp4 / pp5
# save plot
ggsave(
"pp_check.pdf",
plot = pp,
scale = 1,
width = 4,
height = 6,
units = c("in", "cm", "mm", "px"),
dpi = 300)
# save posterior predictive check--------
(pp1 <- pp_check(fit.k, ndraws=100) + ggtitle("Model 1 posterior predictive check") +
theme(legend.position = "none", text = element_text(family = "Arial")))
pp
# save posterior predictive check----
(pp2 <- pp_check(fit.k2, ndraws=100) + ggtitle("Model 2 posterior predictive check") +
theme(legend.position = "none", text = element_text(family = "Arial")))
# save posterior predictive check
(pp3 <- pp_check(fit.intro, ndraws=100) + ggtitle("Model 3 posterior predictive check") +
theme(legend.position = "none", text = element_text(family = "Arial")))
# save posterior predictive check
(pp4 <- pp_check(fit.aff, ndraws=100) + ggtitle("Model 4 posterior predictive check") +
theme(legend.position = "none", text = element_text(family = "Arial")))
# save posterior predictive check
(pp5 <- pp_check(fit.s, ndraws=100) + ggtitle("Model 5 posterior predictive check") +
theme(legend.position = "none", text = element_text(family = "Arial")))
# save posterior predictive check-----
pp <- pp1 / pp2 / pp3 / pp4 / pp5
# save plot
ggsave(
"pp_check.pdf",
plot = pp,
scale = 1,
width = 4,
height = 6,
units = c("in", "cm", "mm", "px"),
dpi = 300)
pp
# save plot
ggsave(
"pp_check.pdf",
plot = pp,
scale = 1,
width = 4,
height = 6,
units = c("in", "cm", "mm", "px"),
dpi = 300)
warnings()
# save posterior predictive check--------
(pp1 <- pp_check(fit.k, ndraws=100) + ggtitle("Model 1 posterior predictive check") +
theme(legend.position = "none", text = element_text(family = "ArialMT")))
# save posterior predictive check----
(pp2 <- pp_check(fit.k2, ndraws=100) + ggtitle("Model 2 posterior predictive check") +
theme(legend.position = "none", text = element_text(family = "ArialMT")))
# save posterior predictive check
(pp3 <- pp_check(fit.intro, ndraws=100) + ggtitle("Model 3 posterior predictive check") +
theme(legend.position = "none", text = element_text(family = "ArialMT")))
# save posterior predictive check
(pp4 <- pp_check(fit.aff, ndraws=100) + ggtitle("Model 4 posterior predictive check") +
theme(legend.position = "none", text = element_text(family = "ArialMT")))
pp
# save posterior predictive check
(pp5 <- pp_check(fit.s, ndraws=100) + ggtitle("Model 5 posterior predictive check") +
theme(legend.position = "none", text = element_text(family = "ArialMT")))
# save posterior predictive check-----
pp <- pp1 / pp2 / pp3 / pp4 / pp5
# save plot
ggsave(
"pp_check.pdf",
plot = pp,
scale = 1,
width = 4,
height = 6,
units = c("in", "cm", "mm", "px"),
dpi = 300)
